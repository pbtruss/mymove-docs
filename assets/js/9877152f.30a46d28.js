"use strict";(self.webpackChunkmymove_docs=self.webpackChunkmymove_docs||[]).push([[4720],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return d}});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),s=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},m=function(e){var t=s(e.components);return o.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=s(n),d=a,k=u["".concat(l,".").concat(d)]||u[d]||p[d]||r;return n?o.createElement(k,c(c({ref:t},m),{},{components:n})):o.createElement(k,c({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,c=new Array(r);c[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var s=2;s<r;s++)c[s]=n[s];return o.createElement.apply(null,c)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},40615:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return m},default:function(){return u}});var o=n(87462),a=n(63366),r=(n(67294),n(3905)),c=["components"],i={sidebar_position:17},l="Time in Golang",s={unversionedId:"backend/guides/golang-time",id:"backend/guides/golang-time",isDocsHomePage:!1,title:"Time in Golang",description:"Clock Dependency",source:"@site/docs/backend/guides/golang-time.md",sourceDirName:"backend/guides",slug:"/backend/guides/golang-time",permalink:"/mymove-docs/docs/backend/guides/golang-time",editUrl:"https://github.com/transcom/mymove-docs/edit/main/docs/backend/guides/golang-time.md",tags:[],version:"current",sidebarPosition:17,frontMatter:{sidebar_position:17},sidebar:"backendSidebar",previous:{title:"Switching over to Nix",permalink:"/mymove-docs/docs/backend/guides/switching-over-to-nix"},next:{title:"Loop Iteration in Golang",permalink:"/mymove-docs/docs/backend/guides/golang-loops"}},m=[{value:"Clock Dependency",id:"clock-dependency",children:[{value:"Setting the Mock Clock",id:"setting-the-mock-clock",children:[]}]},{value:"MilMove Calendar Utilities",id:"milmove-calendar-utilities",children:[]}],p={toc:m};function u(e){var t=e.components,n=(0,a.Z)(e,c);return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"time-in-golang"},"Time in Golang"),(0,r.kt)("h2",{id:"clock-dependency"},"Clock Dependency"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"time.Now()"),' can cause a lot of side effects in a codebase. One example is that you can\'t test the "current" time that happened in a function you called in the past.'),(0,r.kt)("p",null,"For example, let's say we have the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package mypackage\n\nimport "time"\n\nfunc MyTimeFunc() time.Time {\n    return time.Now()\n}\n\nfunc TestMyTimeFunc(t *testing.T) {\n    if MyTimeFunc() != time.Now() {\n        // This will error!\n        // The time in the function and the test happen at different times\n        t.Errorf("time was not now")\n  }\n}\n')),(0,r.kt)("p",null,"How do we test the contents of the return here? If we want to assert the time we need a way to know what ",(0,r.kt)("inlineCode",{parentName:"p"},"time.Now()")," was when the function was called."),(0,r.kt)("p",null,"Instead of directly using the ",(0,r.kt)("inlineCode",{parentName:"p"},"time")," package, we can pass a clock as a\ndependency and call ",(0,r.kt)("inlineCode",{parentName:"p"},".Now()")," on that. Then in our tests, we can assert against\nthat clock! The clock can be anything as long as it adheres to the ",(0,r.kt)("inlineCode",{parentName:"p"},"clock.Clock"),"\ninterface as defined in the ",(0,r.kt)("a",{parentName:"p",href:"https://godoc.org/github.com/facebookgo/clock#Clock"},(0,r.kt)("inlineCode",{parentName:"a"},"facebookgo/clock"),"\npackage"),". We could, for\nexample, make the clock always return the year 0, or the 2019 New Year, or maybe\nyour birthday! In this clock package, there are two clocks."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The real clock where ",(0,r.kt)("inlineCode",{parentName:"li"},"clock.Now()")," will call ",(0,r.kt)("inlineCode",{parentName:"li"},"time.Now()"),"."),(0,r.kt)("li",{parentName:"ul"},"A mock clock where ",(0,r.kt)("inlineCode",{parentName:"li"},"clock.Now()")," always returns epoch time.\nWe'll show later how to change that!")),(0,r.kt)("p",null,"Let's look at the example above with the ",(0,r.kt)("inlineCode",{parentName:"p"},"clock")," package."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package mypackage\n\nimport "fmt"\nimport "time"\n\nimport "github.com/facebookgo/clock"\n\nfunc MyTimeFunc(clock clock.Clock) time.Time {\n    return clock.Now()\n}\n\n// Then our caller\nfunc main() {\n    // clock.New() creates a clock that uses the time package\n    // it will output current time when .Now() is called\n    fmt.Print(MyTimeFunc(clock.New()))\n}\n')),(0,r.kt)("p",null,"Then in our tests we can use a mock clock that freezes ",(0,r.kt)("inlineCode",{parentName:"p"},".Now()")," at epoch time:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func TestMyTimeFunc(t *testing.T) {\n    testClock := clock.NewMock()\n    if MyTimeFunc(testClock) != testClock.Now() {\n        // both should equal epoch time, we won\'t hit this error\n        t.Errorf("time was not now")\n  }\n}\n')),(0,r.kt)("p",null,"Cool, but what if I want to use a different date?"),(0,r.kt)("p",null,"Say my test relies on our ",(0,r.kt)("inlineCode",{parentName:"p"},"TestYear")," constant. The ",(0,r.kt)("a",{parentName:"p",href:"https://godoc.org/github.com/facebookgo/clock#Mock"},"clock.Mock clock")," allows us to add durations to the clock and set the current time. Note that the ",(0,r.kt)("inlineCode",{parentName:"p"},"clock.Clock")," interface does not allow this, it needs to happen before passing the mock clock through the interface parameter."),(0,r.kt)("h3",{id:"setting-the-mock-clock"},"Setting the Mock Clock"),(0,r.kt)("p",null,"Here's an example using the test above and setting the time to September 30 of TestYear:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func TestMyTimeFunc(t *testing.T) {\n    testClock := clock.NewMock()\n    dateToTest := time.Date(TestYear, time.September, 30, 0, 0, 0, 0, time.UTC)\n    timeDiff := dateToTest.Sub(c.Now())\n    testClock.Add(timeDiff)\n    if MyTimeFunc(testClock) != testClock.Now() {\n        // both will now be September 30 of TestYear\n        // we\'ll pass the test again\n        t.Errorf("time was not now")\n  }\n}\n')),(0,r.kt)("h2",{id:"milmove-calendar-utilities"},"MilMove Calendar Utilities"),(0,r.kt)("p",null,"The MilMove project has a set of date/calendar utility to help develop and test.\nYou can find them in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/transcom/mymove/tree/master/pkg/dates"},"dates\npackage")),(0,r.kt)("p",null,"For testing, we also have ",(0,r.kt)("inlineCode",{parentName:"p"},"TestYear")," in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/transcom/mymove/blob/master/pkg/testdatagen/constants.go"},"constants package"),", which should be used instead of the current year."))}u.isMDXComponent=!0}}]);