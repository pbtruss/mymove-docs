"use strict";(self.webpackChunkmymove_docs=self.webpackChunkmymove_docs||[]).push([[5809],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return d}});var o=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=o.createContext({}),m=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},l=function(e){var t=m(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=m(r),d=n,g=p["".concat(s,".").concat(d)]||p[d]||u[d]||a;return r?o.createElement(g,c(c({ref:t},l),{},{components:r})):o.createElement(g,c({ref:t},l))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,c=new Array(a);c[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,c[1]=i;for(var m=2;m<a;m++)c[m]=r[m];return o.createElement.apply(null,c)}return o.createElement.apply(null,r)}p.displayName="MDXCreateElement"},30845:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return m},toc:function(){return l},default:function(){return p}});var o=r(87462),n=r(63366),a=(r(67294),r(3905)),c=["components"],i={sidebar_position:1},s="How To Generate Mocks with Mockery",m={unversionedId:"tools/mockery/generate-mocks-with-mockery",id:"tools/mockery/generate-mocks-with-mockery",isDocsHomePage:!1,title:"How To Generate Mocks with Mockery",description:"Mockery provides the ability to easily generate mocks for golang interfaces. It removes the boilerplate coding required to use mocks.",source:"@site/docs/tools/mockery/generate-mocks-with-mockery.md",sourceDirName:"tools/mockery",slug:"/tools/mockery/generate-mocks-with-mockery",permalink:"/mymove-docs/docs/tools/mockery/generate-mocks-with-mockery",editUrl:"https://github.com/transcom/mymove-docs/edit/main/docs/tools/mockery/generate-mocks-with-mockery.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"toolsSidebar",previous:{title:"Redocusaurus",permalink:"/mymove-docs/docs/tools/docusaurus/redocusaurus"},next:{title:"Setting up Postman",permalink:"/mymove-docs/docs/tools/postman/setting-up-postman"}},l=[{value:"Auto-generating mocks with <code>go generate</code>",id:"auto-generating-mocks-with-go-generate",children:[]}],u={toc:l};function p(e){var t=e.components,r=(0,n.Z)(e,c);return(0,a.kt)("wrapper",(0,o.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"how-to-generate-mocks-with-mockery"},"How To Generate Mocks with Mockery"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/vektra/mockery"},"Mockery")," provides the ability to easily generate mocks for golang interfaces. It removes the boilerplate coding required to use mocks."),(0,a.kt)("p",null," ",(0,a.kt)("em",{parentName:"p"},"In Golang, mocks can only be created on interfaces - not structs. So, it is important that for whichever mock you are trying to generate, it should correspond to the appropriate interface.")),(0,a.kt)("h2",{id:"auto-generating-mocks-with-go-generate"},"Auto-generating mocks with ",(0,a.kt)("inlineCode",{parentName:"h2"},"go generate")),(0,a.kt)("p",null," The ",(0,a.kt)("inlineCode",{parentName:"p"},"make mocks_generate")," command will regenerate mocks for all interfaces tagged with the appropriate ",(0,a.kt)("inlineCode",{parentName:"p"},"go generate")," command. To add an interface to the list of auto-generated mocks, just add a\n",(0,a.kt)("inlineCode",{parentName:"p"},"go:generate")," comment like below and update the name with your interface name."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-.go"},"// AccessCodeClaimer is the service object interface for ValidateAccessCode\n//go:generate mockery -name AccessCodeClaimer\ntype AccessCodeClaimer interface {\n    ClaimAccessCode(code string, serviceMemberID uuid.UUID) (*models.AccessCode, *validate.Errors, error)\n}\n")))}p.isMDXComponent=!0}}]);