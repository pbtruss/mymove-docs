"use strict";(self.webpackChunkmymove_docs=self.webpackChunkmymove_docs||[]).push([[3881],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(t),m=o,h=u["".concat(p,".").concat(m)]||u[m]||l[m]||a;return t?r.createElement(h,i(i({ref:n},d),{},{components:t})):r.createElement(h,i({ref:n},d))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=u;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8302:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return d},default:function(){return u}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],s={},p="How To Call Swagger Endpoints from React",c={unversionedId:"dev/contributing/frontend/access-swagger-endpoints-from-react",id:"dev/contributing/frontend/access-swagger-endpoints-from-react",isDocsHomePage:!1,title:"How To Call Swagger Endpoints from React",description:"1. Verify the Schema is Defined",source:"@site/docs/dev/contributing/frontend/access-swagger-endpoints-from-react.md",sourceDirName:"dev/contributing/frontend",slug:"/dev/contributing/frontend/access-swagger-endpoints-from-react",permalink:"/mymove-docs/docs/dev/contributing/frontend/access-swagger-endpoints-from-react",editUrl:"https://github.com/transcom/mymove-docs/edit/main/docs/dev/contributing/frontend/access-swagger-endpoints-from-react.md",tags:[],version:"current",frontMatter:{},sidebar:"devSidebar",previous:{title:"React forms using Formik",permalink:"/mymove-docs/docs/dev/contributing/frontend/React-forms-using-Formik"},next:{title:"How to display dates and times",permalink:"/mymove-docs/docs/dev/contributing/frontend/display-dates-and-times"}},d=[{value:"1. Verify the Schema is Defined",id:"1-verify-the-schema-is-defined",children:[]},{value:"2. Call the Swagger Operation",id:"2-call-the-swagger-operation",children:[]},{value:"3. Dispatch an Action when Component Mounts",id:"3-dispatch-an-action-when-component-mounts",children:[]},{value:"4. Use a Selector to Access the Data",id:"4-use-a-selector-to-access-the-data",children:[]},{value:"5. Handle Fetch Errors",id:"5-handle-fetch-errors",children:[]}],l={toc:d};function u(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"how-to-call-swagger-endpoints-from-react"},"How To Call Swagger Endpoints from React"),(0,a.kt)("h2",{id:"1-verify-the-schema-is-defined"},"1. Verify the Schema is Defined"),(0,a.kt)("p",null,"For each model type returned by the backend, there needs to be an ",(0,a.kt)("inlineCode",{parentName:"p"},"Entity")," defined and exported in ",(0,a.kt)("inlineCode",{parentName:"p"},"src/shared/Entities/schema.js"),"."),(0,a.kt)("p",null,"Here is the definition for ",(0,a.kt)("inlineCode",{parentName:"p"},"Shipment"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"export const shipment = new schema.Entity('shipments');\n\n// add any embedded objects that should be extracted during normalization\nshipment.define({\n  pickup_address: address,\n  secondary_pickup_address: address,\n  delivery_address: address,\n  partial_sit_delivery_address: address,\n});\n\nexport const shipments = new schema.Array(shipment);\n")),(0,a.kt)("h2",{id:"2-call-the-swagger-operation"},"2. Call the Swagger Operation"),(0,a.kt)("p",null,"Add a function to ",(0,a.kt)("inlineCode",{parentName:"p"},"src/shared/Entities/modules/$MODEL.js")," that calls the ",(0,a.kt)("inlineCode",{parentName:"p"},"operationId")," defined in the\nswagger YAML. Action creator functions should take a ",(0,a.kt)("inlineCode",{parentName:"p"},"label")," argument, which will be used to allow the calling component to determine the status of any requests with that label."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"swaggerRequest")," returns a promise, so it is possible to chain behavior onto its result, for example to perform a few requests in sequence."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { swaggerRequest } from 'shared/Swagger/request';\nimport { getClient } from 'shared/Swagger/api';\n\nexport function getShipment(label, shipmentId, moveId) {\n  return swaggerRequest(\n    getClient,                  // function returning a promise that will resolve to a Swagger client instance\n    'shipments.getShipment',    // what operation to perform, including tag namespace\n    { moveId, shipmentId },     // parameters to pass to the operation\n    { label },                  // optional params for swaggerRequest, such as label\n  );\n}\n")),(0,a.kt)("p",null,"By directing all Swagger Client calls through the ",(0,a.kt)("inlineCode",{parentName:"p"},"swaggerRequest")," function, we can have a centralized place to manage how to track\nthe lifecycle of the request. This allows us to dispatch actions to Redux that represent these events, currently ",(0,a.kt)("inlineCode",{parentName:"p"},"@@swagger/${operation}/START"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"@@swagger/${operation}/SUCCESS")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"@@swagger/${operation}/FAILURE"),". These actions will appear in the Redux debugger along with any other state changes."),(0,a.kt)("h2",{id:"3-dispatch-an-action-when-component-mounts"},"3. Dispatch an Action when Component Mounts"),(0,a.kt)("p",null,"The following pattern, using ",(0,a.kt)("inlineCode",{parentName:"p"},"onDidMount"),", allows the data fetching to be defined outside the component."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"export class ShipmentDisplay extends Component {\n\n    componentDidMount() {\n        this.props.onDidMount && this.props.onDidMount();\n    }\n\n    render {\n        const { shipment } = this.props;\n\n        return (\n            <div>\n                <p>You are moving on { shipment.requested_move_date }.</p>\n            </div>\n        );\n    }\n}\n\nShipmentDisplay.propTypes = {\n    shipmentID: PropTypes.string.isRequired,\n\n    onDidMount: PropTypes.function,\n    shipment: PropTypes.object,\n};\n\nconst requestLabel = 'ShipmentDisplay.getShipment';\n\nfunction mapDispatchToProps(dispatch, ownProps) {\n    return {\n        onDidMount: function() {\n            dispatch(getShipment(requestLabel, ownProps.shipmentID));        }\n    };\n}\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    shipment: selectShipment(ownProps.shipmentID),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShipmentDisplay);\n")),(0,a.kt)("p",null,"If you need to load data based on a value that isn't passed in as a ",(0,a.kt)("inlineCode",{parentName:"p"},"prop"),", it's best to embed another component and pass that value into it as a ",(0,a.kt)("inlineCode",{parentName:"p"},"prop"),". This can be thought of as an extension of the container pattern."),(0,a.kt)("h2",{id:"4-use-a-selector-to-access-the-data"},"4. Use a Selector to Access the Data"),(0,a.kt)("p",null,"All data access should be done through selectors and not by directly accessing the global Redux state."),(0,a.kt)("p",null,"Add a function to ",(0,a.kt)("inlineCode",{parentName:"p"},"src/shared/Entities/modules/$MODEL.js")," that returns the value from Redux. This example uses ",(0,a.kt)("inlineCode",{parentName:"p"},"denormalize"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// Return a shipment identified by its ID\nexport function selectShipment(state, id) {\n  if (!id) {\n    return null;\n  }\n  return denormalize([id], shipments, state.entities)[0];\n}\n")),(0,a.kt)("p",null,"This one returns a value that doesn't need ",(0,a.kt)("inlineCode",{parentName:"p"},"denormalize"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// Return a shipment identified by its ID\nexport function selectShipment(state, id) {\n  if (!id) {\n    return null;\n  }\n  return get(state, `entities.shipments.${id}`);\n}\n")),(0,a.kt)("h2",{id:"5-handle-fetch-errors"},"5. Handle Fetch Errors"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"lastError")," selector provides access to the last error for a specified request label."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { lastError } from 'shared/Swagger/selectors';\n\nexport class ShipmentDisplay extends Component {\n\n    componentDidMount() {\n        this.props.onDidMount && this.props.onDidMount();\n    }\n\n    render {\n        const { shipment, error } = this.props;\n\n        return (\n            { error && <p>An error has occurred.</p> }\n\n            <div>\n                <p>You are moving on { shipment.requested_move_date }.</p>\n            </div>\n        );\n    }\n}\n\nShipmentDisplay.propTypes = {\n    shipmentID: PropTypes.string.isRequired,\n\n    onDidMount: PropTypes.function,\n    shipment: PropTypes.object,\n    error: PropTypes.object,\n};\n\nconst requestLabel = 'ShipmentDisplay.getShipment';\n\nfunction mapDispatchToProps(dispatch, ownProps) {\n    return {\n        onDidMount: function() {\n            dispatch(getShipment(requestLabel, ownProps.shipmentID));\n        }\n    };\n}\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    shipment: selectShipment(ownProps.shipmentID),\n    error: lastError(state, requestLabel),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShipmentDisplay);\n")))}u.isMDXComponent=!0}}]);