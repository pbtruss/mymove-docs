"use strict";(self.webpackChunkmymove_docs=self.webpackChunkmymove_docs||[]).push([[6403],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return d}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=u(n),d=r,k=c["".concat(l,".").concat(d)]||c[d]||p[d]||o;return n?a.createElement(k,i(i({ref:t},m),{},{components:n})):a.createElement(k,i({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},54774:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return m},default:function(){return c}});var a=n(87462),r=n(63366),o=(n(67294),n(3905)),i=["components"],s={sidebar_position:23},l="Open Telemetry",u={unversionedId:"backend/guides/open-telemetry",id:"backend/guides/open-telemetry",isDocsHomePage:!1,title:"Open Telemetry",description:"The Milmove app has had aspects of logging (Zap), tracing (trace middleware), and monitoring (AWS infra dashboards) previously, but there is now an ADR to use the Open Telemetry library to standardize our efforts. While not solely useful just for load testing, it did expose our need for better insight into the performance of the Milmove app and it's services.",source:"@site/docs/backend/guides/open-telemetry.md",sourceDirName:"backend/guides",slug:"/backend/guides/open-telemetry",permalink:"/mymove-docs/docs/backend/guides/open-telemetry",editUrl:"https://github.com/transcom/mymove-docs/edit/main/docs/backend/guides/open-telemetry.md",tags:[],version:"current",sidebarPosition:23,frontMatter:{sidebar_position:23},sidebar:"backendSidebar",previous:{title:"Debugging SQL Tests",permalink:"/mymove-docs/docs/backend/guides/debugging-sql-tests"},next:{title:"Configure Postico or TablePlus to connect to mymove DB",permalink:"/mymove-docs/docs/backend/setup/configure-postico-or-tableplus-to-connect-to-mymove-db"}},m=[{value:"Implementation",id:"implementation",children:[{value:"Environment configuration",id:"environment-configuration",children:[]},{value:"Go package",id:"go-package",children:[]},{value:"Instrumentation",id:"instrumentation",children:[]}]},{value:"Data collection",id:"data-collection",children:[{value:"Traces",id:"traces",children:[]},{value:"Metrics",id:"metrics",children:[]},{value:"Resources",id:"resources",children:[]}]}],p={toc:m};function c(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"open-telemetry"},"Open Telemetry"),(0,o.kt)("p",null,"The Milmove app has had aspects of logging (Zap), tracing (trace middleware), and monitoring (AWS infra dashboards) previously, but there is now an ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/transcom/mymove/blob/master/docs/adr/0061-use-opentelemetry-for-distributed-tracing.md"},"ADR to use the Open Telemetry library")," to standardize our efforts. While not solely useful just for load testing, it did expose our need for better insight into the performance of the Milmove app and it's services."),(0,o.kt)("h2",{id:"implementation"},"Implementation"),(0,o.kt)("h3",{id:"environment-configuration"},"Environment configuration"),(0,o.kt)("p",null,"Open Telemetry is configured like many of our features through environment\nvariables.  When the application binary is started in ",(0,o.kt)("inlineCode",{parentName:"p"},"cmd/milmove/serve.go")," the\nsystem reads if telemetry is enabled and also for which environment it is\nrunning in (locally or ",(0,o.kt)("inlineCode",{parentName:"p"},"loadtesting")," on AWS)."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Telemetry environment variables:")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Environment variable"),(0,o.kt)("th",{parentName:"tr",align:null},"Default value"),(0,o.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"TELEMETRY_ENABLED"),(0,o.kt)("td",{parentName:"tr",align:null},"false"),(0,o.kt)("td",{parentName:"tr",align:null},"Enables telemetry")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"TELEMETRY_ENDPOINT"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"stdout")),(0,o.kt)("td",{parentName:"tr",align:null},"Endpoint for where to send traces and metrics, the default would be the console. An HTTP and/or GPRC endpoint ",(0,o.kt)("inlineCode",{parentName:"td"},"host:port")," where exports are sent.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"TELEMETRY_USE_XRAY_ID"),(0,o.kt)("td",{parentName:"tr",align:null},"false"),(0,o.kt)("td",{parentName:"tr",align:null},"When telemetry is used in a deployed AWS environment this needs to be set to true so that trace IDs are formatted properly. This way the same request can be correlated across the firewall WAF, Load Balancer, and ECS service if needed.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"TELEMETRY_SAMPLING_FRACTION"),(0,o.kt)("td",{parentName:"tr",align:null},".5"),(0,o.kt)("td",{parentName:"tr",align:null},"Recording every log would bog down the application so we only want to send a representative fraction of all logs.  When developing locally setting to ",(0,o.kt)("inlineCode",{parentName:"td"},"1")," would mean every log is sent.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"TELEMETRY_COLLECT_SECONDS"),(0,o.kt)("td",{parentName:"tr",align:null},"30"),(0,o.kt)("td",{parentName:"tr",align:null},"The interval in seconds between calls to collect metrics.")))),(0,o.kt)("p",null,"When ",(0,o.kt)("a",{parentName:"p",href:"/mymove-docs/docs/tools/telemetry/running-telemetry-locally"},"running telemetry locally")," with the open telemetry collector stack (defined in docker-compose.telemetry.yaml), the development configuration used is that of ",(0,o.kt)("inlineCode",{parentName:"p"},"config/telemetry/collector-config.dev.yaml")),(0,o.kt)("h3",{id:"go-package"},"Go package"),(0,o.kt)("p",null,"The main initialization code for registering telemetry can be found in ",(0,o.kt)("inlineCode",{parentName:"p"},"pkg/telemetry/init.go")),(0,o.kt)("p",null,"The custom code for collecting database connection stats also lives within the package at ",(0,o.kt)("inlineCode",{parentName:"p"},"pkg/telemetry/db.go"),"."),(0,o.kt)("p",null,"The code for hooking into the Go runtime library for memory stats lives within the package at ",(0,o.kt)("inlineCode",{parentName:"p"},"pkg/telemetry/runtime.go")),(0,o.kt)("h3",{id:"instrumentation"},"Instrumentation"),(0,o.kt)("p",null,"The ecosystem of Open Telemetry comes with many built in and 3rd party libraries for plugging into our existing code with little or no customization."),(0,o.kt)("h4",{id:"routing"},"Routing"),(0,o.kt)("p",null,"Milmove uses the Gorilla Mux router so we can use the existing ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/open-telemetry/opentelemetry-go-contrib/tree/main/instrumentation/github.com/gorilla/mux/otelmux"},"Open Telemetry\nMux library")," middleware for our non-swagger routes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-golang"},'router.Use(otelmux.Middleware("auth"))\n')),(0,o.kt)("h4",{id:"http-handler"},"HTTP handler"),(0,o.kt)("p",null,"Similar to the otelmux library the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/trussworks/otelhttp"},"Open Telemetry HTTP\nlibrary")," is designed to wrap HTTP\nhandler functions. It has built in events (read & write) to report the request\nsize, response size, and duration of the HTTP request.  It is more configurable\nthan the ",(0,o.kt)("inlineCode",{parentName:"p"},"otelmux")," middleware allowing you to filter out certain routes and other\ncontrols."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-golang"},'otelhttp.NewHandler(router, "server-tls", []otelHTTP.Option{otelHTTP.ReadEvents, otelHTTP.WriteEvents})\n')),(0,o.kt)("p",null,"Note: This implementation has been forked to the Trussworks GitHub to address bug fixes."),(0,o.kt)("h4",{id:"sql"},"SQL"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/XSAM/otelsql"},(0,o.kt)("inlineCode",{parentName:"a"},"XSAM/otelsql"))," library wraps the queries to\nour Postgres database and appends a span to the trace with the statement and\nduration information.  Query parameters may be hidden to not log sensitive\ninformation.  It can also be used to log calls to cursor rows when paging\nthrough larger result sets."),(0,o.kt)("h4",{id:"go"},"Go"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/open-telemetry/opentelemetry-go-contrib/tree/main/instrumentation/runtime"},"Go runtime instrumentation library")," primarily provides statistics on memory usage and garbage collection cycles that may degrade performance."),(0,o.kt)("h2",{id:"data-collection"},"Data collection"),(0,o.kt)("p",null,"Data from the MilMove app is sent to the Open Telemetry collector, which processes the trace, metric, and log data and exports it to the services of our choice.  In AWS the collector exports to the CloudWatch and AWS X-Ray services for storage and analysis.  When run locally the data is exported to the Elastic APM Server running Elasticsearch and Kibana."),(0,o.kt)("h3",{id:"traces"},"Traces"),(0,o.kt)("p",null,"A trace can be thought of as a tree linked structure of one or more spans that represent a segment of time.  A single trace may contain child spans that include the duration of the HTTP API request on the server and span(s) for the database calls within that lifecycle.  ",(0,o.kt)("a",{parentName:"p",href:"https://opentelemetry.io/docs/reference/specification/trace/semantic_conventions/"},"The Open Telemetry specification")," defines semantic conventions that our libraries primarily follow for span attribute names and values."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Common Trace fields")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"ID"),(0,o.kt)("li",{parentName:"ul"},"Parent ID"),(0,o.kt)("li",{parentName:"ul"},"Trace ID"),(0,o.kt)("li",{parentName:"ul"},"Name"),(0,o.kt)("li",{parentName:"ul"},"Kind"),(0,o.kt)("li",{parentName:"ul"},"Start time"),(0,o.kt)("li",{parentName:"ul"},"End time"),(0,o.kt)("li",{parentName:"ul"},"Status code"),(0,o.kt)("li",{parentName:"ul"},"Status message")),(0,o.kt)("h4",{id:"http-requests"},"HTTP Requests"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"http.client_ip\nhttp.flavor\nhttp.host\nhttp.method\nhttp.scheme\nhttp.server_name\nhttp.status_code\nhttp.target\nhttp.user_agent\nhttp.wrote_bytes\nnet.host_ip\nnet.host_port\nnet.peer_ip\nnet.peer_port\nnet.transport\n")),(0,o.kt)("h4",{id:"database-sql-statements"},"Database SQL Statements"),(0,o.kt)("p",null,"Spans/segments will be added to the current trace when database queries (Select) or executions (Update/Insert) are made within a request."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"sql.conn.exec")," (Update/Insert statements)"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"db.statement")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"sql.conn.query")," (Select statements)"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"db.system"),(0,o.kt)("li",{parentName:"ul"},"db.statement")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"sql.rows")," (When using a rows cursor to iterate through database results)"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"db.system")),(0,o.kt)("h3",{id:"metrics"},"Metrics"),(0,o.kt)("p",null,"Open Telemetry defines three primary metric instrument types to be counters, measures, and observers.  Metric events should conform to the ",(0,o.kt)("a",{parentName:"p",href:"https://opentelemetry.io/docs/reference/specification/overview/#metric-signal"},"metrics specification"),", which supports both non-aggregated and pre-aggregated measurements."),(0,o.kt)("h4",{id:"http"},"HTTP"),(0,o.kt)("p",null,"HTTP Request Count"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"HTTP Protocol Version"),(0,o.kt)("li",{parentName:"ul"},"Host"),(0,o.kt)("li",{parentName:"ul"},"Scheme"),(0,o.kt)("li",{parentName:"ul"},"Server Name (TLS/MTLS/No-TLS)"),(0,o.kt)("li",{parentName:"ul"},"Status Code"),(0,o.kt)("li",{parentName:"ul"},"Target (URL path)")),(0,o.kt)("p",null,"HTTP Request Content Length"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"HTTP Protocol Version"),(0,o.kt)("li",{parentName:"ul"},"Host"),(0,o.kt)("li",{parentName:"ul"},"Scheme"),(0,o.kt)("li",{parentName:"ul"},"Server Name (TLS/MTLS/No-TLS)"),(0,o.kt)("li",{parentName:"ul"},"Target (URL path)")),(0,o.kt)("p",null,"HTTP Response Content Length"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"HTTP Protocol Version"),(0,o.kt)("li",{parentName:"ul"},"Host"),(0,o.kt)("li",{parentName:"ul"},"Scheme"),(0,o.kt)("li",{parentName:"ul"},"Server Name (TLS/MTLS/No-TLS)"),(0,o.kt)("li",{parentName:"ul"},"Target (URL path)")),(0,o.kt)("p",null,"HTTP Duration"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"HTTP Protocol Version"),(0,o.kt)("li",{parentName:"ul"},"Host"),(0,o.kt)("li",{parentName:"ul"},"Scheme"),(0,o.kt)("li",{parentName:"ul"},"Server Name (TLS/MTLS/No-TLS)"),(0,o.kt)("li",{parentName:"ul"},"Target (URL path)")),(0,o.kt)("h4",{id:"database-connections"},"Database Connections"),(0,o.kt)("p",null,"Database Pool Connections"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Inuse"),(0,o.kt)("li",{parentName:"ul"},"Idle"),(0,o.kt)("li",{parentName:"ul"},"Wait Duration")),(0,o.kt)("h4",{id:"go-runtime"},"Go Runtime"),(0,o.kt)("p",null,"Copied from ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/open-telemetry/opentelemetry-go-contrib/blob/main/instrumentation/runtime/doc.go"},"https://github.com/open-telemetry/opentelemetry-go-contrib/blob/main/instrumentation/runtime/doc.go")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"runtime.go.cgo.calls         -          Number of cgo calls made by the current process\nruntime.go.gc.count          -          Number of completed garbage collection cycles\nruntime.go.gc.pause_ns       (ns)       Amount of nanoseconds in GC stop-the-world pauses\nruntime.go.gc.pause_total_ns (ns)       Cumulative nanoseconds in GC stop-the-world pauses since the program started\nruntime.go.goroutines        -          Number of goroutines that currently exist\nruntime.go.lookups           -          Number of pointer lookups performed by the runtime\nruntime.go.mem.heap_alloc    (bytes)    Bytes of allocated heap objects\nruntime.go.mem.heap_idle     (bytes)    Bytes in idle (unused) spans\nruntime.go.mem.heap_inuse    (bytes)    Bytes in in-use spans\nruntime.go.mem.heap_objects  -          Number of allocated heap objects\nruntime.go.mem.heap_released (bytes)    Bytes of idle spans whose physical memory has been returned to the OS\nruntime.go.mem.heap_sys      (bytes)    Bytes of heap memory obtained from the OS\nruntime.go.mem.live_objects  -          Number of live objects is the number of cumulative Mallocs - Frees\nruntime.go.runtime.uptime    (ms)       Milliseconds since application was initialized\n")),(0,o.kt)("h4",{id:"aws-container-metrics"},"AWS Container Metrics"),(0,o.kt)("p",null,"All containers running on AWS ECS can access container level metrics including\nmemory, CPU, network, and storage usage. In the ",(0,o.kt)("a",{parentName:"p",href:"https://aws-otel.github.io/docs/components/ecs-metrics-receiver"},"AWS OTEL\ncollector")," we\nconnect the receiver and exporter to send data from the container through to\nCloudwatch."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Task Level Metrics              Container Level               Metrics Unit\n\necs.task.memory.usage           container.memory.usage        Bytes\necs.task.memory.usage.max       container.memory.usage.max    Bytes\necs.task.memory.usage.limit     container.memory.usage.limit  Bytes\necs.task.memory.reserved        container.memory.reserved     Megabytes\necs.task.memory.utilized        container.memory.utilized     Megabytes\n\necs.task.cpu.usage.total        container.cpu.usage.total       Nanoseconds\necs.task.cpu.usage.kernelmode   container.cpu.usage.kernelmode  Nanoseconds\necs.task.cpu.usage.usermode     container.cpu.usage.usermode    Nanoseconds\necs.task.cpu.usage.system       container.cpu.usage.system      Nanoseconds\necs.task.cpu.usage.vcpu         container.cpu.usage.vcpu        vCPU\necs.task.cpu.cores              container.cpu.cores             Count\necs.task.cpu.onlines            container.cpu.onlines           Count\necs.task.cpu.reserved           container.cpu.reserved          vCPU\necs.task.cpu.utilized           container.cpu.utilized          Percent\n\necs.task.network.rate.rx              container.network.rate.rx             Bytes/Second\necs.task.network.rate.tx              container.network.rate.tx             Bytes/Second\necs.task.network.io.usage.rx_bytes    container.network.io.usage.rx_bytes   Bytes\necs.task.network.io.usage.rx_packets  container.network.io.usage.rx_packets Count\necs.task.network.io.usage.rx_errors   container.network.io.usage.rx_errors  Count\necs.task.network.io.usage.rx_dropped  container.network.io.usage.rx_dropped Count\necs.task.network.io.usage.tx_bytes    container.network.io.usage.tx_bytes   Bytes\necs.task.network.io.usage.tx_packets  container.network.io.usage.tx_packets Count\necs.task.network.io.usage.tx_errors   container.network.io.usage.tx_errors  Count\necs.task.network.io.usage.tx_dropped  container.network.io.usage.tx_dropped Count\n\necs.task.storage.read_bytes   container.storage.read_bytes  Bytes\necs.task.storage.write_bytes  container.storage.write_bytes Bytes\n")),(0,o.kt)("h4",{id:"elasticache-redis"},"Elasticache (Redis)"),(0,o.kt)("p",null,"The Milmove app uses a Redis cache to store session data for auth purposes.  I omitted some of the credit balance metrics that infra uses but the full documentation is available here ",(0,o.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheMetrics.Redis.html"},"https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheMetrics.Redis.html"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"ActiveDefragHits"),(0,o.kt)("li",{parentName:"ul"},"BytesUsedForCache"),(0,o.kt)("li",{parentName:"ul"},"CacheHitRate"),(0,o.kt)("li",{parentName:"ul"},"CacheHits"),(0,o.kt)("li",{parentName:"ul"},"CacheMisses"),(0,o.kt)("li",{parentName:"ul"},"CPUUtilization"),(0,o.kt)("li",{parentName:"ul"},"CurrConnections"),(0,o.kt)("li",{parentName:"ul"},"CurrItems"),(0,o.kt)("li",{parentName:"ul"},"DatabaseMemoryUsagePercentage"),(0,o.kt)("li",{parentName:"ul"},"DBOAveerageTTL"),(0,o.kt)("li",{parentName:"ul"},"EngineCPUUtilization"),(0,o.kt)("li",{parentName:"ul"},"Evictions"),(0,o.kt)("li",{parentName:"ul"},"FreeableMemory"),(0,o.kt)("li",{parentName:"ul"},"GetTypeCmds"),(0,o.kt)("li",{parentName:"ul"},"GetTypeCmdsLatency"),(0,o.kt)("li",{parentName:"ul"},"IsMaster"),(0,o.kt)("li",{parentName:"ul"},"KeyBasedCmds"),(0,o.kt)("li",{parentName:"ul"},"KeyBasedCmdsLatency"),(0,o.kt)("li",{parentName:"ul"},"MasterLinkHealthStatus"),(0,o.kt)("li",{parentName:"ul"},"MemoryFragmentationRatio"),(0,o.kt)("li",{parentName:"ul"},"NetworkBytesIn"),(0,o.kt)("li",{parentName:"ul"},"NetworkBytesOut"),(0,o.kt)("li",{parentName:"ul"},"NetworkPacketsin"),(0,o.kt)("li",{parentName:"ul"},"NetworkPacketsout"),(0,o.kt)("li",{parentName:"ul"},"NewConnections"),(0,o.kt)("li",{parentName:"ul"},"Reclaimed"),(0,o.kt)("li",{parentName:"ul"},"ReplicationBytes"),(0,o.kt)("li",{parentName:"ul"},"ReplicationLag"),(0,o.kt)("li",{parentName:"ul"},"SaveInProgress"),(0,o.kt)("li",{parentName:"ul"},"SetTypeCmds"),(0,o.kt)("li",{parentName:"ul"},"SetTypeCmdsLatency"),(0,o.kt)("li",{parentName:"ul"},"StringBasedCmds"),(0,o.kt)("li",{parentName:"ul"},"StringBasedCmdsLatency"),(0,o.kt)("li",{parentName:"ul"},"SwapUsage")),(0,o.kt)("h3",{id:"resources"},"Resources"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://opentelemetry.io/"},"Open Telemetry Homepage")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://opentelemetry.io/docs/go/"},"Open Telemetry for Golang")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://aws-otel.github.io/"},"AWS Open Telemetry Docs")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.elastic.co/observability/application-performance-monitoring"},"Elastic Application Performance Monitoring")))}c.isMDXComponent=!0}}]);