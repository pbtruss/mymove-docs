"use strict";(self.webpackChunkmymove_docs=self.webpackChunkmymove_docs||[]).push([[2939],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=l(n),m=o,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||s;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,i=new Array(s);i[0]=d;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var l=2;l<s;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3142:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return d}});var r=n(7462),o=n(3366),s=(n(7294),n(3905)),i=["components"],a={},c="How To Run End to End (Cypress) Tests",l={unversionedId:"old-wiki/run-e2e-tests",id:"old-wiki/run-e2e-tests",isDocsHomePage:!1,title:"How To Run End to End (Cypress) Tests",description:"Using the Cypress UI",source:"@site/docs/old-wiki/run-e2e-tests.md",sourceDirName:"old-wiki",slug:"/old-wiki/run-e2e-tests",permalink:"/docs/old-wiki/run-e2e-tests",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/old-wiki/run-e2e-tests.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"How To Run Against S3 & CDN Locally",permalink:"/docs/old-wiki/run-against-s3-locally"},next:{title:"How To Run Go Tests",permalink:"/docs/old-wiki/run-go-tests"}},u=[{value:"Using the Cypress UI",id:"using-the-cypress-ui",children:[]},{value:"In Docker",id:"in-docker",children:[]},{value:"Run Specific Tests in a File",id:"run-specific-tests-in-a-file",children:[]}],p={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,s.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"how-to-run-end-to-end-cypress-tests"},"How To Run End to End (Cypress) Tests"),(0,s.kt)("h2",{id:"using-the-cypress-ui"},"Using the Cypress UI"),(0,s.kt)("p",null,'The fastest way to run end to end tests is with the following command, which will open the\nCypress UI, from which you can choose to run all integration specs (there should be a link in\nthe top right that says something like "Run 25 integration specs"), or click on individual ones.'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-console"},"$ make e2e_test\n")),(0,s.kt)("p",null,"This command truncates most tables in the test DB (which is much faster than destroying it, running it again,\nand running all the migrations), then populates the DB from the data in the\n",(0,s.kt)("inlineCode",{parentName:"p"},"/pkg/testdatagen/scenario/e2ebasic.go")," script, and then launches Cypress."),(0,s.kt)("p",null,"Sometimes, a new recently-merged migration might prevent the script from running.\nIn that case, or if something else seems wrong with the test DB, you can set everything\nup from scratch:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-console"},"$ make e2e_test_fresh\n")),(0,s.kt)("p",null,"If you have already run tests in the current database, and you want to keep Cypress open\nto run the tests again, you can empty and refill the test DB with this command:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-console"},"$ make db_e2e_up\n")),(0,s.kt)("h2",{id:"in-docker"},"In Docker"),(0,s.kt)("p",null,"If you instead would like to run all the tests in the terminal, use the following command:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-console"},"$ make e2e_test_docker\n")),(0,s.kt)("p",null,"To run just the office tests:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-console"},"$ SPEC=cypress/integration/office/**/* make e2e_test_docker\n")),(0,s.kt)("h2",{id:"run-specific-tests-in-a-file"},"Run Specific Tests in a File"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-console"},"$ yarn cypress run --spec cypress/integration/path/to/file.jsx\n")))}d.isMDXComponent=!0}}]);