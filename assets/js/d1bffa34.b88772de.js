"use strict";(self.webpackChunkmymove_docs=self.webpackChunkmymove_docs||[]).push([[6266],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(n),m=s,h=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(h,a(a({ref:t},u),{},{components:n})):r.createElement(h,a({ref:t},u))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,a=new Array(o);a[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:s,a[1]=i;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},49650:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(87462),s=(n(67294),n(3905));const o={sidebar_position:5},a="How to run end to end (Cypress) tests",i={unversionedId:"backend/testing/run-e2e-tests",id:"backend/testing/run-e2e-tests",title:"How to run end to end (Cypress) tests",description:"Cypress tests run using the client-side code. This guide shows you how to run",source:"@site/docs/backend/testing/run-e2e-tests.md",sourceDirName:"backend/testing",slug:"/backend/testing/run-e2e-tests",permalink:"/mymove-docs/docs/backend/testing/run-e2e-tests",draft:!1,editUrl:"https://github.com/transcom/mymove-docs/edit/main/docs/backend/testing/run-e2e-tests.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"backendSidebar",previous:{title:"How to run acceptance tests",permalink:"/mymove-docs/docs/backend/testing/run-acceptance-tests"},next:{title:"How to run Go tests",permalink:"/mymove-docs/docs/backend/testing/run-go-tests"}},c={},l=[{value:"Using the Cypress UI",id:"using-the-cypress-ui",level:2},{value:"In Docker",id:"in-docker",level:2},{value:"Run Specific Tests in a File",id:"run-specific-tests-in-a-file",level:2}],u={toc:l};function p(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"how-to-run-end-to-end-cypress-tests"},"How to run end to end (Cypress) tests"),(0,s.kt)("p",null,"Cypress tests run using the client-side code. This guide shows you how to run\nthe Cypress test suite either as Docker container, as a command-line tool\nlocally, or using the Cypress UI. When running within these tests, make sure you\nbuild the client locally in order to ensure that the latest client code is what\nCypress is testing against."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"make client_build\n")),(0,s.kt)("p",null,"After completing the previous command, you should be able to run the commands\nbefore and utilize the same client-side code to test. If you make any changes\nwithin the ",(0,s.kt)("inlineCode",{parentName:"p"},"src/")," directory, you will need to rebuild the client-side code. The\nsame is not true for the back-end work as that work is reloaded every time the\nCypress tests are started."),(0,s.kt)("h2",{id:"using-the-cypress-ui"},"Using the Cypress UI"),(0,s.kt)("p",null,'The fastest way to run end to end tests is with the following command, which will open the\nCypress UI, from which you can choose to run all integration specs (there should be a link in\nthe top right that says something like "Run 25 integration specs"), or click on individual ones.'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"make e2e_test\n")),(0,s.kt)("p",null,"This command truncates most tables in the test DB (which is much faster than destroying it, running it again,\nand running all the migrations), then populates the DB from the data in the\n",(0,s.kt)("inlineCode",{parentName:"p"},"/pkg/testdatagen/scenario/e2ebasic.go")," script, and then launches Cypress UI."),(0,s.kt)("p",null,"Sometimes, a new recently-merged migration might prevent the script from running.\nIn that case, or if something else seems wrong with the test DB, you can set everything\nup from scratch:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"make e2e_test_fresh\n")),(0,s.kt)("p",null,"If you have already run tests in the current database, and you want to keep Cypress open\nto run the tests again, you can empty and refill the test DB with this command:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"make db_e2e_up\n")),(0,s.kt)("h2",{id:"in-docker"},"In Docker"),(0,s.kt)("p",null,"If you instead would like to run all the tests in the terminal, use the following command:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"make e2e_test_docker\n")),(0,s.kt)("p",null,"To run just the office tests:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"SPECS=cypress/integration/office/**/* make e2e_test_docker\n")),(0,s.kt)("h2",{id:"run-specific-tests-in-a-file"},"Run Specific Tests in a File"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"yarn cypress run --spec cypress/integration/path/to/file.jsx\n")))}p.isMDXComponent=!0}}]);