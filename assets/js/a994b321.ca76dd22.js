"use strict";(self.webpackChunkmymove_docs=self.webpackChunkmymove_docs||[]).push([[8701],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=o,h=m["".concat(p,".").concat(d)]||m[d]||l[d]||a;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},89095:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return u},default:function(){return m}});var r=n(87462),o=n(63366),a=(n(67294),n(3905)),i=["components"],s={},p="AppContext: how and when to use it",c={unversionedId:"dev/contributing/backend/use-stateless-services-with-app-context",id:"dev/contributing/backend/use-stateless-services-with-app-context",isDocsHomePage:!1,title:"AppContext: how and when to use it",description:"We want our services to be composable, so that one service can call",source:"@site/docs/dev/contributing/backend/use-stateless-services-with-app-context.md",sourceDirName:"dev/contributing/backend",slug:"/dev/contributing/backend/use-stateless-services-with-app-context",permalink:"/mymove-docs/docs/dev/contributing/backend/use-stateless-services-with-app-context",editUrl:"https://github.com/transcom/mymove-docs/edit/main/docs/dev/contributing/backend/use-stateless-services-with-app-context.md",tags:[],version:"current",frontMatter:{},sidebar:"devSidebar",previous:{title:"Validation in Service Objects",permalink:"/mymove-docs/docs/dev/contributing/backend/service-validation"},next:{title:"Database",permalink:"/mymove-docs/docs/dev/contributing/database/"}},u=[{value:"Testing with AppContext",id:"testing-with-appcontext",children:[]}],l={toc:u};function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"appcontext-how-and-when-to-use-it"},"AppContext: how and when to use it"),(0,a.kt)("p",null,"We want our services to be composable, so that one service can call\nanother. We also want to be able to have a per request trace id\nassociated with a logger so that we can correlate log messages in a\nsingle request."),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/transcom/mymove/blob/master/docs/adr/0064-use-stateless-services-with-context.md"},"ADR 0064")," for more background."),(0,a.kt)("p",null,"The way we achieve that goal is by storing the DB connection, logger, and\nsession inside an instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"appcontext.AppContext"),", and requiring all\nfunctions that need one or more of those elements (DB, logger, session) to accept an argument of type ",(0,a.kt)("inlineCode",{parentName:"p"},"appcontext.AppContext")," as its first argument. The function can then extract those elements from the app context, like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func MyFunction(appCtx appcontext.AppContext) {\n  db := appCtx.DB()\n  logger := appCtx.Logger()\n  session := appCtx.Session()\n}\n")),(0,a.kt)("p",null,"Search the ",(0,a.kt)("inlineCode",{parentName:"p"},"mymove")," codebase for ",(0,a.kt)("inlineCode",{parentName:"p"},"appCtx appcontext.AppContext")," for more usage\nexamples. We also have examples here in ",(0,a.kt)("a",{parentName:"p",href:"service-objects#naming-and-defining-public-service-object-functions"},"Service Objects")," and ",(0,a.kt)("a",{parentName:"p",href:"Guide-to-Creating-an-Endpoint#steps-to-creating-a-new-handler"},"Guide to Creating an Endpoint"),"."),(0,a.kt)("h2",{id:"testing-with-appcontext"},"Testing with AppContext"),(0,a.kt)("p",null,"When testing a service object function, we need to pass in an instance of the AppContext that contains the test DB and test logger. That instance can be created like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"appcontext.NewAppContext(suite.DB(), suite.logger)\n")),(0,a.kt)("p",null,"Since this is a common thing to do in tests, packages should extract this into a ",(0,a.kt)("inlineCode",{parentName:"p"},"TestAppContext()")," helper method that's defined in the package's ",(0,a.kt)("inlineCode",{parentName:"p"},"*_test.go")," file. For example, it is defined in ",(0,a.kt)("inlineCode",{parentName:"p"},"pkg/services/mto_shipment/mto_shipment_service_test.go")," for the ",(0,a.kt)("inlineCode",{parentName:"p"},"mtoshipment")," package:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// TestAppContext returns the AppContext for the test suite\nfunc (suite *MTOShipmentServiceSuite) TestAppContext() appcontext.AppContext {\n  return appcontext.NewAppContext(suite.DB(), suite.logger)\n}\n")),(0,a.kt)("p",null,"Search for ",(0,a.kt)("inlineCode",{parentName:"p"},"TestAppContext() appcontext.AppContext")," in the codebase for more examples."),(0,a.kt)("p",null,"You can then use it in tests like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'func (suite *MTOShipmentServiceSuite) TestRejectShipment() {\n  router := NewShipmentRouter()\n  approver := NewShipmentRejecter(router)\n  reason := "reason"\n\n  suite.T().Run("If the shipment rejection is approved successfully, it should update the shipment status in the DB", func(t *testing.T) {\n    shipment := testdatagen.MakeDefaultMTOShipmentMinimal(suite.DB())\n    shipmentEtag := etag.GenerateEtag(shipment.UpdatedAt)\n    fetchedShipment := models.MTOShipment{}\n\n    rejectedShipment, err := approver.RejectShipment(suite.TestAppContext(), shipment.ID, shipmentEtag, &reason)\n\n    suite.NoError(err)\n    suite.Equal(shipment.MoveTaskOrderID, rejectedShipment.MoveTaskOrderID)\n\n    err = suite.DB().Find(&fetchedShipment, shipment.ID)\n    suite.NoError(err)\n\n    suite.Equal(models.MTOShipmentStatusRejected, fetchedShipment.Status)\n    suite.Equal(shipment.ID, fetchedShipment.ID)\n    suite.Equal(rejectedShipment.ID, fetchedShipment.ID)\n    suite.Equal(&reason, fetchedShipment.RejectionReason)\n  })\n}\n')))}m.isMDXComponent=!0}}]);