"use strict";(self.webpackChunkmymove_docs=self.webpackChunkmymove_docs||[]).push([[1490],{3905:function(e,t,o){o.d(t,{Zo:function(){return p},kt:function(){return u}});var n=o(67294);function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,n,a=function(e,t){if(null==e)return{};var o,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var o=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(o),u=a,h=m["".concat(l,".").concat(u)]||m[u]||d[u]||r;return o?n.createElement(h,i(i({ref:t},p),{},{components:o})):n.createElement(h,i({ref:t},p))}));function u(e,t){var o=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=o.length,i=new Array(r);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<r;c++)i[c]=o[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,o)}m.displayName="MDXCreateElement"},93122:function(e,t,o){o.r(t),o.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var n=o(87462),a=o(63366),r=(o(67294),o(3905)),i=["components"],s={},l="Loop Iteration in Golang",c={unversionedId:"dev/contributing/backend/golang-loops",id:"dev/contributing/backend/golang-loops",isDocsHomePage:!1,title:"Loop Iteration in Golang",description:"Introduction",source:"@site/docs/dev/contributing/backend/golang-loops.md",sourceDirName:"dev/contributing/backend",slug:"/dev/contributing/backend/golang-loops",permalink:"/mymove-docs/docs/dev/contributing/backend/golang-loops",editUrl:"https://github.com/transcom/mymove-docs/edit/main/docs/dev/contributing/backend/golang-loops.md",tags:[],version:"current",frontMatter:{},sidebar:"devSidebar",previous:{title:"Golang Programming Guide",permalink:"/mymove-docs/docs/dev/contributing/backend/golang-guide"},next:{title:"Time in Golang",permalink:"/mymove-docs/docs/dev/contributing/backend/golang-time"}},p=[{value:"Introduction",id:"introduction",children:[]},{value:"Problem Manifestation",id:"problem-manifestation",children:[]},{value:"Discovery",id:"discovery",children:[]},{value:"How to Fix",id:"how-to-fix",children:[]},{value:"References",id:"references",children:[]}],d={toc:p};function m(e){var t=e.components,o=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,n.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"loop-iteration-in-golang"},"Loop Iteration in Golang"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"When writing loops in Go, you should be aware of how Go instantiates and uses loop variables. Consider this example\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/transcom/mymove/blob/b173c32688c6f1e4fedc58aaf46fd88e4afb04af/pkg/handlers/primeapi/payloads/model_to_payload.go#L55-L58"},"from our code history"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"for i, m := range *moveTaskOrders {\n    payload[i] = MoveTaskOrder(&m)\n}\n")),(0,r.kt)("p",null,"Go will create a single variable ",(0,r.kt)("inlineCode",{parentName:"p"},"m")," that receives a copy of each item in the ",(0,r.kt)("inlineCode",{parentName:"p"},"moveTaskOrders")," slice. Because ",(0,r.kt)("inlineCode",{parentName:"p"},"m")," is\nnot reallocated with each loop iteration, taking the address of m (",(0,r.kt)("inlineCode",{parentName:"p"},"&m"),") like done above will result in an identical\npointer value every time through the loop. That can have subtle consequences that you need to keep in mind."),(0,r.kt)("h2",{id:"problem-manifestation"},"Problem Manifestation"),(0,r.kt)("p",null,"The purpose of the code above is to translate a tree of model structs to a swagger-generated payload struct to be\nreturned by an endpoint. However, in some cases during this translation, we take the addresses of items and\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/transcom/mymove/blob/b173c32688c6f1e4fedc58aaf46fd88e4afb04af/pkg/handlers/primeapi/payloads/model_to_payload.go#L181-L183"},"copy them to their corresponding fields"),"\nin the payload structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"return &primemessages.Address{\n    // ...\n    City:       &address.City,\n    State:      &address.State,\n    PostalCode: &address.PostalCode,\n    // ...\n}\n")),(0,r.kt)("p",null,"The behavior we were seeing in the case above was that some fields like those above in the payload's ",(0,r.kt)("inlineCode",{parentName:"p"},"Address")," structure\nappeared to be the same regardless of what was in the database or the ",(0,r.kt)("inlineCode",{parentName:"p"},"Address")," model (both of which were correct).\nIn fact, those fields would always be set to the values in the ",(0,r.kt)("em",{parentName:"p"},"last")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Address")," that was processed in the loop. This is\nconsistent with the Go loop behavior mentioned above since the payload fields point to the correct\nvalues in each iteration, but the subsequent iterations will overwrite the data pointed to and therefore make\nthem all appear to be the same after each loop iteration."),(0,r.kt)("p",null,"Note that this does not happen to every field in the payload because we are often not doing a direct pointer copy.\nIf we're just copying a value type to another value type, a copy of the value is being made so it's disassociated\nfrom the source. If we're copying a pointer to data that is not being replaced -- for instance, if the model was\nalready storing a ",(0,r.kt)("inlineCode",{parentName:"p"},"*string")," for instance, then we seem to be OK too since that pointer is to a different piece of memory, not\nthe loop iterator variable. It's only a problem when we're copying the address of some item in the loop\niterator variable (at least in this particular case) since that memory location will not change across iterations.\nAs you can see, there are some subtleties involved."),(0,r.kt)("h2",{id:"discovery"},"Discovery"),(0,r.kt)("p",null,"We recently upgraded to a newer version of ",(0,r.kt)("inlineCode",{parentName:"p"},"golangci-lint")," which includes a newer ",(0,r.kt)("inlineCode",{parentName:"p"},"gosec")," that will flag cases where\nit thinks this situation occurs. The specific linter warning returned is ",(0,r.kt)("inlineCode",{parentName:"p"},"G601: Implicit memory aliasing of items\nfrom a range statement"),"."),(0,r.kt)("h2",{id:"how-to-fix"},"How to Fix"),(0,r.kt)("p",null,"The most straightforward fix is to make a local copy of the loop iterator variable within the loop itself, then\ntake the address of it. Since that local variable is scoped to the loop, it should be a different memory address\nwith each iteration. So, given our initial example above, we could change it to the following to prevent the\noverwriting scenario described above:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"for i, m := range *moveTaskOrders {\n    copyOfM := m // Make copy to avoid implicit memory aliasing of items from a range statement.\n    payload[i] = MoveTaskOrder(&copyOfM)\n}\n")),(0,r.kt)("p",null,"Another alternative is to take the address of the slice elements instead:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"for i := range *moveTaskOrders {\n    // Take the address of the slice element to avoid implicit memory aliasing of items from a range statement.\n    payload[i] = MoveTaskOrder(&moveTaskOrders[i])\n}\n")),(0,r.kt)("p",null,"If using that strategy, keep in mind that you may be storing pointers to existing slice elements, so there are some\ngarbage collection and concurrency concerns to consider (as noted in this ",(0,r.kt)("a",{parentName:"p",href:"https://stackoverflow.com/a/48826629"},"Stackoverflow answer"),")."),(0,r.kt)("p",null,"A casual observer who hasn't been exposed to this loop behavior may see the fixes above as unnecessary, so regardless\nof which fix you apply, be sure to add a comment to let them know that the fix was done on purpose and should not\nbe accidentally undone."),(0,r.kt)("p",null,"Another option that achieves a similar goal would be to change the called function/method's signature to accept a ",(0,r.kt)("a",{parentName:"p",href:"https://goinbigdata.com/golang-pass-by-pointer-vs-pass-by-value/"},"value type rather\nthan a reference"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"for i, m := range *moveTaskOrders {\n    payload[i] = MoveTaskOrder(m)\n}\n")),(0,r.kt)("p",null,"You would no longer need the local copy in that case as calling the method would automatically make a copy, but\nyou would have to refactor all calls to that function/method since you would be changing its signature."),(0,r.kt)("h2",{id:"references"},"References"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Golang Wiki: ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/golang/go/wiki/CommonMistakes#using-reference-to-loop-iterator-variable"},"Using reference to loop iterator variable")),(0,r.kt)("li",{parentName:"ul"},"Stack Overflow: ",(0,r.kt)("a",{parentName:"li",href:"https://stackoverflow.com/questions/48826460/using-pointers-in-a-for-loop"},"Using Pointers in a for loop")),(0,r.kt)("li",{parentName:"ul"},"Stack Overflow: ",(0,r.kt)("a",{parentName:"li",href:"https://stackoverflow.com/questions/62446118/implicit-memory-aliasing-in-for-loop"},"Implicit memory aliasing in for loop")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.evanjones.ca/go-gotcha-loop-variables.html"},"Go Gotcha: Don't take the address of loop variables"))))}m.isMDXComponent=!0}}]);