"use strict";(self.webpackChunkmymove_docs=self.webpackChunkmymove_docs||[]).push([[5540],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return g}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),g=o,m=d["".concat(l,".").concat(g)]||d[g]||p[g]||s;return n?r.createElement(m,a(a({ref:t},u),{},{components:n})):r.createElement(m,a({ref:t},u))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var c=2;c<s;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},73178:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var r=n(87462),o=n(63366),s=(n(67294),n(3905)),a=["components"],i={sidebar_position:22},l="Debugging SQL Tests",c={unversionedId:"backend/guides/debugging-sql-tests",id:"backend/guides/debugging-sql-tests",isDocsHomePage:!1,title:"Debugging SQL Tests",description:"Overview",source:"@site/docs/backend/guides/debugging-sql-tests.md",sourceDirName:"backend/guides",slug:"/backend/guides/debugging-sql-tests",permalink:"/mymove-docs/docs/backend/guides/debugging-sql-tests",editUrl:"https://github.com/transcom/mymove-docs/edit/main/docs/backend/guides/debugging-sql-tests.md",tags:[],version:"current",sidebarPosition:22,frontMatter:{sidebar_position:22},sidebar:"backendSidebar",previous:{title:"WIP server-side validation",permalink:"/mymove-docs/docs/backend/guides/wip-server-side-validation"},next:{title:"Open Telemetry",permalink:"/mymove-docs/docs/backend/guides/open-telemetry"}},u=[{value:"Overview",id:"overview",children:[]},{value:"Database Setup",id:"database-setup",children:[]},{value:"Log All SQL Statements",id:"log-all-sql-statements",children:[]}],p={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,a);return(0,s.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"debugging-sql-tests"},"Debugging SQL Tests"),(0,s.kt)("h2",{id:"overview"},"Overview"),(0,s.kt)("p",null,"Sometimes, when refactoring or changing code, you get an unexpected\nsql error, like ",(0,s.kt)("inlineCode",{parentName:"p"},"sql: transaction has already been committed or rolled\nback"),". Below is one technique for figuring out what is going on."),(0,s.kt)("h2",{id:"database-setup"},"Database Setup"),(0,s.kt)("p",null,"Each of our tests should run in a transaction, which means trying to\nfigure out the state of the database after the tests finish is hard\nsince it is reset. Each package runs its tests in a clone of the\ndatabase."),(0,s.kt)("p",null,"After you run ",(0,s.kt)("inlineCode",{parentName:"p"},"make server_test_setup"),", you should see a docker\ncontainer running with the name ",(0,s.kt)("inlineCode",{parentName:"p"},"milmove-db-test")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$ docker docker ps -f name=milmove-db-test\n")),(0,s.kt)("p",null,"You can connect to that docker container and see the databases.\nSomething like"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$ docker exec -it milmove-db-test psql -U postgres -l\n                                 List of databases\n   Name    |  Owner   | Encoding |  Collate   |   Ctype    |   Access privileges\n-----------+----------+----------+------------+------------+-----------------------\n postgres  | postgres | UTF8     | en_US.utf8 | en_US.utf8 |\n template0 | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres          +\n           |          |          |            |            | postgres=CTc/postgres\n template1 | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres          +\n           |          |          |            |            | postgres=CTc/postgres\n test_db   | postgres | UTF8     | en_US.utf8 | en_US.utf8 |\n(4 rows)\n")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"test_db")," is the template database. Now, run your failing test\n(and only your failing test)."),(0,s.kt)("p",null,"Something like"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$ go test ./pkg/handlers/internalapi/ -testify.m TestCancelMoveHandler\nok      github.com/transcom/mymove/pkg/handlers/internalapi 0.929s\n")),(0,s.kt)("p",null,"Now look at your databases again"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"docker exec -it milmove-db-test psql -U postgres -l\n                                 List of databases\n   Name    |  Owner   | Encoding |  Collate   |   Ctype    |   Access privileges\n-----------+----------+----------+------------+------------+-----------------------\n postgres  | postgres | UTF8     | en_US.utf8 | en_US.utf8 |\n template0 | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres          +\n           |          |          |            |            | postgres=CTc/postgres\n template1 | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres          +\n           |          |          |            |            | postgres=CTc/postgres\n test_db   | postgres | UTF8     | en_US.utf8 | en_US.utf8 |\n test_db_1 | postgres | UTF8     | en_US.utf8 | en_US.utf8 |\n(5 rows)\n")),(0,s.kt)("p",null,"Note the ",(0,s.kt)("inlineCode",{parentName:"p"},"test_db_1")," database, which is a clone of the pristine\n",(0,s.kt)("inlineCode",{parentName:"p"},"test_db")," instance and is what is used for your test."),(0,s.kt)("h2",{id:"log-all-sql-statements"},"Log All SQL Statements"),(0,s.kt)("p",null,"Now, we are going to tell postgres to log every single SQL statement:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"docker exec -it milmove-db-test psql -U postgres \\\n  -c \"ALTER DATABASE test_db_1 SET log_statement = 'all'\"\n")),(0,s.kt)("p",null,"In one terminal window, let's watch the logs"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$ docker logs -f milmove-db-test\n...\n2022-03-30 19:35:05.603 UTC [149] STATEMENT:  ALTER DATABASE test_db_1 SET log_statment = 'all'\n")),(0,s.kt)("p",null,"Ok! Now we can run our test again (in another terminal window)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$ go test ./pkg/handlers/internalapi/ -testify.m TestCancelMoveHandler\nok      github.com/transcom/mymove/pkg/handlers/internalapi 0.929s\n")),(0,s.kt)("p",null,"You can see every single SQL statement!"),(0,s.kt)("p",null,"If you want to try and figure out which SQL statement is being called\nwhere, add something like ..."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},"    _, err = appCtx.DB().Store.Exec(\"SET LOCAL drew.foo = 'after function foo'\")\n    if err != nil {\n      // return the error, abort, or something\n      return err\n    }\n")),(0,s.kt)("p",null,"Now you can run your test again and look for that in the logs."))}d.isMDXComponent=!0}}]);